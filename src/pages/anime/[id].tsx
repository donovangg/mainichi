import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import type {
  GetStaticPaths,
  GetStaticProps,
  InferGetStaticPropsType,
} from "next";
import Head from "next/head";
import TitleTab from "~/components/TitleTab";
import CharactersContainer from "~/components/CharactersContainer";

const animeDetails = ({ ani, characters }) => {
  const router = useRouter();
  // const slicedCharacters = characters.data.slice(0, 6);

  if (
    router.isFallback ||
    !ani ||
    !ani.data ||
    !characters ||
    !characters.data ||
    ani === null ||
    characters === null
  ) {
    return (
      <div className="grid items-center">
        <h2 className="mb-4 text-center text-2xl">Getting Anime Data!</h2>
        <img src="/assets/yuru-camp.gif" />
      </div>
    );
  }

  console.log(ani.data);
  console.log(characters.data);

  return (
    <>
      <Head>
        <title>Mainichi | {ani.data.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header
        className={`absolute top-0 z-10 flex w-screen flex-col items-center overflow-hidden
     bg-[image:var(--image-url)] bg-cover bg-no-repeat py-36`}
        style={{ backgroundImage: `url(${ani.data.images.webp.image_url})` }}
      >
        <div className="absolute left-0 top-0 h-full w-full bg-[url('/assets/texture.png')]"></div>
        <div className="absolute left-0 top-0 h-full w-full bg-black opacity-40"></div>
      </header>
      <section className="mx-auto mt-64 overflow-x-hidden rounded-md pb-44 md:w-9/12  lg:mt-44 lg:w-9/12">
        <div className="mx-auto mt-10 w-9/12 bg-white  p-4 shadow-lg lg:grid lg:grid-cols-2">
          <div className="z-50  flex justify-center">
            <img
              src={ani.data.images.webp.image_url}
              alt={ani.data.title}
              className="-mt-12"
            />
          </div>
          <div className="gap-4 sm:grid sm:place-items-center lg:grid lg:place-items-start">
            <TitleTab
              title={ani.data.title}
              jpTitle={ani.data.title_japanese}
            />
          </div>
        </div>
        <section className="mx-auto lg:grid xl:w-9/12 xl:grid-cols-4">
          <section className="mx-auto mt-4 flex w-11/12 flex-col md:w-full">
            <div className="  bg-white p-4 shadow-lg">
              <ul>
                <li className="">
                  <p className="text-2xl text-zinc-900">Airing:</p>
                  <p>{ani.data.status}</p>
                </li>
                <li className="my-2">
                  <p className="text-2xl text-zinc-900">Broadcast:</p>
                  <p>{ani.data.broadcast.string}</p>
                </li>
                <li>
                  <a
                    href={ani.data.url}
                    className="text-pink-700  duration-75 hover:text-pink-500"
                    target="_blank"
                  >
                    MyanimeList
                  </a>
                </li>
              </ul>
            </div>
            <div className="my-2 bg-white p-4 shadow-lg">
              <h3 className="text-2xl text-zinc-900">Synopsis:</h3>
              <p className="text-clip break-normal leading-6">
                {ani.data.synopsis}
              </p>
            </div>
            <div className="my-2 bg-white p-4 shadow-lg">
              <h3 className="text-2xl text-zinc-900">Rating:</h3>
              <p className="text-clip break-normal leading-6">
                {ani.data.rating}
              </p>
            </div>
            <div className="my-2 bg-white p-4 shadow-lg">
              <h3 className="text-2xl text-zinc-900">Genres:</h3>
              {ani.data.genres.map((genre) => (
                <React.Fragment key={genre.mal_id}>
                  <p className="text-clip break-normal leading-6">
                    {genre.name}
                  </p>
                </React.Fragment>
              ))}
            </div>
            <div className="my-2 bg-white p-4 shadow-lg">
              <h2 className="text-2xl text-zinc-900">
                Platforms for streaming:
              </h2>
              <>
                {ani.data.streaming.map((stream) => (
                  <div key={stream.name}>
                    <a
                      href={stream.url}
                      target="_blank"
                      className="text-pink-700  duration-75 hover:text-pink-500"
                    >
                      {stream.name}
                    </a>
                  </div>
                ))}
              </>
            </div>
            <div className="my-2 bg-white p-4 shadow-lg">
              <h2 className="text-2xl text-zinc-900">External Links:</h2>
              <>
                {ani.data.external.map((link) => (
                  <div key={link.name}>
                    <a
                      href={link.url}
                      target="_blank"
                      className="text-pink-700  duration-75 hover:text-pink-500"
                    >
                      {link.name}
                    </a>
                  </div>
                ))}
              </>
            </div>
          </section>
          <section className="mt-4  lg:col-span-4 lg:col-start-2">
            <CharactersContainer characters={characters} />
          </section>
        </section>
        <section>
          <div className="mx-auto w-full md:w-9/12">
            <h3 className="my-4 text-4xl text-zinc-900">Trailer</h3>
            <iframe
              className="aspect-video w-full"
              src={`${ani.data.trailer.embed_url}?autoplay=0`}
              title={ani.data.name + "trailer"}
              allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowFullScreen
            ></iframe>
          </div>
        </section>
      </section>
    </>
  );
};

const getAnimeIds = async () => {
  const res = await fetch("https://api.jikan.moe/v4/seasons/2023/fall");
  const data = await res.json();
  return data.data;
};

export const getStaticPaths = async () => {
  const animeIds = await getAnimeIds();

  // Generate paths for each anime ID
  const paths = animeIds.map((id) => ({ params: { id: id.toString() } }));

  return { paths, fallback: true };
};

export const getStaticProps = async ({ params }) => {
  try {
    const id = params.id;

    const [animeRes, charactersRes] = await Promise.all([
      fetch(`https://api.jikan.moe/v4/anime/${id}/full`),
      fetch(`https://api.jikan.moe/v4/anime/${id}/characters`),
    ]);

    const [animeData, charactersData] = await Promise.all([
      animeRes.json(),
      charactersRes.json(),
    ]);

    console.log("Anime Data:", animeData);
    console.log("Characters Data:", charactersData);

    return {
      props: {
        ani: animeData,
        characters: charactersData,
      },
      revalidate: 60,
    };
  } catch (error) {
    console.log("Error fetching data!", error);
    return {
      props: {
        ani: null,
        characters: null,
      },
      revalidate: 60,
    };
  }
};

export default animeDetails;
